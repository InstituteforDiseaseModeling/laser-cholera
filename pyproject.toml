[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "laser-cholera"
version = "0.8.0"
authors = [
  { name="Christopher Lorton", email="christopher.lorton@gatesfoundation.org" },
  { name="John Giles", email="john.giles@gatesfoundation.org" },
]
maintainers = [
  { name="Christopher Lorton", email="christopher.lorton@gatesfoundation.org" },
]
description = "LASIK - LASER based SImulation of Kolera"
readme = "README.MD"
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.9"
keywords = ["cholera", "simulation", "laser", "spatial modeling"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    # "Programming Language :: Python :: 3.13",   # Not until Numba supports it
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "laser-core==0.4.0",
    "geopandas",
    "h5py",
    # "numpy==2.0.2", # depend on laser-core
    # "llvmlite==0.43.0", # depend on laser-core
    # "numba==0.60.0", # depend on laser-core
    "scipy",
    "tqdm",
]

[project.optional-dependencies]
"dev" = ["pytest", "build"]
# "docs" = ["sphinx", "sphinx-rtd-theme"]
"nb" = ["jupyter", "nbconvert", "nbformat", "ipykernel"]

[project.urls]
Homepage = "https://example.com"
Documentation = "https://laser-cholera.readthedocs.io/en/latest/"
Repository = "https://github.com/InstituteforDiseaseModeling/laser-cholera.git"
Issues = "https://github.com/InstituteforDiseaseModeling/laser-cholera/issues"
Changelog = "https://github.com/InstituteforDiseaseModeling/laser-cholera/blob/master/CHANGELOG.md"

[project.scripts]
cli = "laser_cholera.cli:run"
metapop = "laser_cholera.metapop.model:cli_run"

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
line-length = 140
src = ["src", "tests"]
target-version = "py39"

[tool.ruff.lint.per-file-ignores]
"ci/*" = ["S"]

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "S603", # flake8-bandit subprocess-without-shell-equals-true
    "S607", # flake8-bandit start-process-with-partial-path
    "E501", # pycodestyle line-too-long
    "DTZ001", # flake8-datetimez call datetime without tzinfo
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true

[tool.ruff.format]
quote-style = "double"


[tool.bumpversion]
current_version = "0.8.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "README.MD"
search = "since v{current_version}"
replace = "since v{new_version}"

[[tool.bumpversion.files]]
filename = "README.MD"
search = "/v{current_version}.svg"
replace = "/v{new_version}.svg"

[[tool.bumpversion.files]]
filename = "README.rst"
search = "/v{current_version}.svg"
replace = "/v{new_version}.svg"

[[tool.bumpversion.files]]
filename = "README.rst"
search = "/v{current_version}...main"
replace = "/v{new_version}...main"

[[tool.bumpversion.files]]
filename = "docs/conf.py"
search = 'version = release = "{current_version}"'
replace = 'version = release = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/laser_cholera/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
